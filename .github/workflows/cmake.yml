name: CMake

on:
  pull_request:
  push:
    branches:
      - master

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  CACHE_DIR: cache
  CACHED_GTEST_DIR: cache/gtest
  JOBS: 12

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Load cache
      uses: actions/cache@v2
      id: cache
      with:
        path: ${{runner.workspace}}/${{env.CACHE_DIR}}
        key: ${{runner.os}}-cache

    - name: Initialize cache directory
      if: steps.cache.outputs.cache-hit != 'true'
      shell: bash
      working-directory: ${{runner.workspace}}
      run: mkdir -p ${{env.CACHE_DIR}}

    - name: Fetch Google Test
      if: steps.cache.outputs.cache-hit != 'true'
      shell: bash
      working-directory: ${{runner.workspace}}/${{env.CACHE_DIR}}
      run: wget https://github.com/google/googletest/archive/master.zip

    - name: Prepare Google Test
      if: steps.cache.outputs.cache-hit != 'true'
      shell: bash
      working-directory: ${{runner.workspace}}/${{env.CACHE_DIR}}
      run: |
        unzip master.zip
        mv googletest-master ${{runner.workspace}}/${{env.CACHED_GTEST_DIR}}
        mkdir -p ${{runner.workspace}}/${{env.CACHED_GTEST_DIR}}/build

    - name: Build Google Test
      if: steps.cache.outputs.cache-hit != 'true'
      shell: bash
      working-directory: ${{runner.workspace}}/${{env.CACHED_GTEST_DIR}}/build
      run: |
        cmake ${{runner.workspace}}/${{env.CACHED_GTEST_DIR}} -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_SHARED_LIBS=ON
        cmake --build . -j $JOBS --config $BUILD_TYPE

    - name: Install Google Test
      shell: bash
      working-directory: ${{runner.workspace}}/${{env.CACHED_GTEST_DIR}}/build
      run: sudo cmake --build . -j $JOBS --config $BUILD_TYPE --target install

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      env:
        CXX: g++-10
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . -j $JOBS --config $BUILD_TYPE

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE --output-on-failure
